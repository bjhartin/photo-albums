Blend:

- Don't pull all answers into memory, write as received
- Use Http4s client
- Use Task
  - Show gather unordered
- Use Specs2
  - Tests for:
    - Arguments
    - Can't retrieve (general error)
    - Unexpected format (200, but format wrong)



Pure FP:

Things to use:

- sbt
- cats
- cats-effect
- enumeratum
- circe
- doobie ?
- test container
- http4s
- scalacheck

Types:

Album(id: AlbumId, title: AlbumTitle, url: AlbumUrl, thumbnailUrl: ThumbnailUrl)

AlbumId
Id
Title
AlbumUrl
ThumbnailUrl

Shape:

Http4s Client

AlbumId => F[List[Album]] // No such album is a failed F

(Working) Propositions:

A AlbumId is a positive integer
A PhotoId is a positive integer
A PhotoTitle title is a nonempty string
An PhotoURL is a url of the form https://via.placeholder.com/600/771796
    This implies the propositions
        ExternalPhotoResourceId
A PhotoURL is a url of the form https://via.placeholder.com/150/92c952
    This implies the propositions
        ExternalThumbnailResourceId
A Photo is a product of PhotoId, PhotoTitle, PhotoUrl
An Album is a product of AlbumId, Photo
    Alternately a Photo includes AlbumId and we dispense with Album,
      since we have no Album details

FP branches:


build.sbt


val circeV = "0.9.3"
val doobieV = "0.5.3"
val enumeratumV = "1.5.13"
val enumeratumCirceV = "1.5.17"
val flywayV = "4.2.0"
val http4sV = "0.18.16"
val logbackV = "5.0"
val logbackClassicV = "1.2.3"
val pureConfigV = "0.9.1"
val scalaCheckV = "1.14.0"
val scalaCheckShapelessV = "1.1.6"
val simpleHealthV = "0.6.0"
val specs2V = "4.2.0"
val testContainersV = "0.15.0"
val testContainersPostgresV = "1.6.0"
val bannoAllMigrationsV = "2.1044.0"

lazy val `photo-albums` =
project
.in(file("photo-albums"))
.enablePlugins(BannoDockerPlugin)
.settings(
  name := "photo-albums",
  libraryDependencies ++= Seq(
        "ch.qos.logback"        %  "logback-classic"          % logbackClassicV,
        "com.banno"             % "banno-all-migrations"      % bannoAllMigrationsV % Test,
        "com.banno"             %% "simple-health-doobie"     % simpleHealthV,
        "com.banno"             %% "simple-health-dropwizard" % simpleHealthV,
        "com.banno"             %% "simple-health-zookeeper"  % simpleHealthV,
        "com.beachape"          %% "enumeratum-circe"         % enumeratumCirceV,
        "com.beachape"          %% "enumeratum"               % enumeratumV,
        "com.beachape"          %% "enumeratum-scalacheck"    % enumeratumV % Test,
        "com.dimafeng"          %% "testcontainers-scala"     % testContainersV % Test,
        "com.github.alexarchambault" %% "scalacheck-shapeless_1.13" % scalaCheckShapelessV % Test,
        "com.github.pureconfig" %% "pureconfig"               % "0.9.1",
        "io.circe"              %% "circe-generic"            % circeV,
        "io.circe"              %% "circe-java8"              % circeV,
        "net.logstash.logback"  %  "logstash-logback-encoder" % logbackV,
        "org.http4s"            %% "http4s-blaze-client"      % http4sV,
        "org.flywaydb"          %  "flyway-core"              % flywayV % Test,
        "org.http4s"            %% "http4s-blaze-server"      % http4sV,
        "org.http4s"            %% "http4s-circe"             % http4sV,
        "org.http4s"            %% "http4s-dsl"               % http4sV,
        "org.http4s"            %% "http4s-server-metrics"    % http4sV,
        "org.scalacheck"        %% "scalacheck"               % scalaCheckV % Test,
        "org.specs2"            %% "specs2-core"              % specs2V % Test,
        "org.testcontainers"    %  "postgresql"               % testContainersPostgresV % Test,
        "org.tpolecat"          %% "doobie-core"              % doobieV,
        "org.tpolecat"          %% "doobie-hikari"            % doobieV,
        "org.tpolecat"          %% "doobie-postgres"          % doobieV,
        "org.tpolecat"          %% "doobie-specs2"            % doobieV % Test
      ),
      Compile / console / scalacOptions ~= ((options: Seq[String]) =>
        options.filterNot(s => s.startsWith("-Ywarn") || s.startsWith("-Xlint")))
    )

lazy val root = project
  .in(file("."))
  .settings(
    name := "photo-albums",
    inThisBuild(
      Seq(
        scalaVersion := "2.12.6",
        scalafmtOnCompile := true,
        addCompilerPlugin("com.olegpy" %% "better-monadic-for" % "0.2.4"),
        scalacOptions += "-Ywarn-macros:after",
        testOptions in Test += Tests.Argument(TestFrameworks.ScalaCheck, "-verbosity", "1"),
        )),
    bannoReleaseGitPushOnlyTag := true
  )
  .aggregate(
    `photo-albums`
  )
